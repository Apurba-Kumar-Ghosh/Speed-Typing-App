{"version":3,"sources":["useWordGame.js","App.js","serviceWorker.js","index.js"],"names":["useWordGame","defaultValue","START_TIME","useState","timer","setTimer","text","setText","wordCount","setWordCount","gameState","setGameState","speed","setSpeed","inputRef","useRef","handleChange","event","target","value","handleClick","current","disabled","focus","wordCounter","data","trim","split","filter","word","length","startGame","setTimeout","prevTimer","endGame","answer","useEffect","App","className","name","onChange","ref","onClick","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPA6DeA,MA3Df,WAAyC,IAApBC,EAAmB,uDAAJ,GAC5BC,EAAaD,EADmB,EAEZE,mBAASD,GAFG,mBAE/BE,EAF+B,KAExBC,EAFwB,OAGdF,mBAAS,IAHK,mBAG/BG,EAH+B,KAGzBC,EAHyB,OAIJJ,mBAAS,GAJL,mBAI/BK,EAJ+B,KAIpBC,EAJoB,OAKJN,oBAAS,GALL,mBAK/BO,EAL+B,KAKpBC,EALoB,OAMZR,mBAAS,MANG,mBAM/BS,EAN+B,KAMxBC,EANwB,KAOhCC,EAAWC,iBAAO,MAExB,SAASC,EAAaC,GACpBV,EAAQU,EAAMC,OAAOC,OAEvB,SAASC,IACPX,EAAa,GACbF,EAAQ,IACRO,EAASO,QAAQC,UAAW,EAC5BR,EAASO,QAAQE,QACjBZ,GAAa,GAEf,SAASa,EAAYC,GAKnB,OAJgBA,EACbC,OACAC,MAAM,KACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KACLC,OAEjB,SAASC,IAIP,OAHcC,YAAW,WACvB3B,GAAS,SAAC4B,GAAD,OAAeA,EAAY,OACnC,KAGL,SAASC,IACPvB,GAAa,GACb,IAAMwB,EAASX,EAAYlB,GAC3BG,EAAa0B,GACbtB,EAAUsB,EAASjC,EAAc,IACjCK,EAAQ,IACRF,EAASH,GAUX,OAPAkC,qBAAU,WACJhC,EAAQ,IAAmB,IAAdM,EACfqB,IACS3B,GAAS,GAClB8B,MAED,CAAC9B,EAAOM,IACJ,CACLJ,OACAU,eACAN,YACAI,WACAV,QACAgB,cACAZ,YACAI,U,MCTWyB,MA7Cf,WAAgB,IAAD,EAUTrC,IARFM,EAFW,EAEXA,KACAU,EAHW,EAGXA,aACAN,EAJW,EAIXA,UACAI,EALW,EAKXA,SACAV,EANW,EAMXA,MACAgB,EAPW,EAOXA,YACAZ,EARW,EAQXA,UACAI,EATW,EASXA,MAGF,OACE,yBAAK0B,UAAU,aACb,kDACA,8BACEC,KAAK,WACLD,UAAU,YACVnB,MAAOb,EACPkC,SAAUxB,EACVM,UAAWZ,EACX+B,IAAK3B,IAEP,gDACoBV,EAClB,2CAEF,4BAAQsC,QAAStB,EAAaE,SAAUZ,GAAxC,cAGA,6CAAmBF,EAAnB,KACA,uCACWI,EADX,IACkB,sCAElB,4BACE8B,QAAS,WACPC,OAAOC,SAASC,WAFpB,WC1BcC,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a2a2c7d.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\nfunction useWordGame(defaultValue = 60) {\r\n  const START_TIME = defaultValue;\r\n  const [timer, setTimer] = useState(START_TIME);\r\n  const [text, setText] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [gameState, setGameState] = useState(false);\r\n  const [speed, setSpeed] = useState(null);\r\n  const inputRef = useRef(null);\r\n\r\n  function handleChange(event) {\r\n    setText(event.target.value);\r\n  }\r\n  function handleClick() {\r\n    setWordCount(0);\r\n    setText(\"\");\r\n    inputRef.current.disabled = false;\r\n    inputRef.current.focus();\r\n    setGameState(true);\r\n  }\r\n  function wordCounter(data) {\r\n    const wordArr = data\r\n      .trim()\r\n      .split(\" \")\r\n      .filter((word) => word !== \"\");\r\n    return wordArr.length;\r\n  }\r\n  function startGame() {\r\n    let timerId = setTimeout(() => {\r\n      setTimer((prevTimer) => prevTimer - 1);\r\n    }, 1000);\r\n    return timerId;\r\n  }\r\n  function endGame() {\r\n    setGameState(false);\r\n    const answer = wordCounter(text);\r\n    setWordCount(answer);\r\n    setSpeed((answer / START_TIME) * 60);\r\n    setText(\"\");\r\n    setTimer(START_TIME);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timer > 0 && gameState === true) {\r\n      startGame();\r\n    } else if (timer <= 0) {\r\n      endGame();\r\n    }\r\n  }, [timer, gameState]);\r\n  return {\r\n    text,\r\n    handleChange,\r\n    gameState,\r\n    inputRef,\r\n    timer,\r\n    handleClick,\r\n    wordCount,\r\n    speed,\r\n  };\r\n}\r\nexport default useWordGame;\r\n","import React from \"react\";\nimport useWordGame from \"./useWordGame.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const {\n    text,\n    handleChange,\n    gameState,\n    inputRef,\n    timer,\n    handleClick,\n    wordCount,\n    speed,\n  } = useWordGame();\n\n  return (\n    <div className=\"container\">\n      <h3>Start Typing below</h3>\n      <textarea\n        name=\"textarea\"\n        className=\"text-area\"\n        value={text}\n        onChange={handleChange}\n        disabled={!gameState}\n        ref={inputRef}\n      />\n      <h2>\n        Time remaining : {timer}\n        <span> seconds</span>\n      </h2>\n      <button onClick={handleClick} disabled={gameState}>\n        Start Game\n      </button>\n      <h3>words typed : {wordCount} </h3>\n      <h3>\n        speed : {speed} <span>wpm</span>\n      </h3>\n      <button\n        onClick={() => {\n          window.location.reload();\n        }}\n      >\n        Reset\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}